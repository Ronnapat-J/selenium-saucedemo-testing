from selenium import webdriver
from selenium.webdriver.common.by import By
import time
import json

# ‡πÇ‡∏´‡∏•‡∏î Configuration
with open("config.json", "r") as file:
    config = json.load(file)

USERNAME = config["username"]
PASSWORD = config["password"]
KEYWORDS = config["keywords"]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
log_file = open("test_log.txt", "w", encoding="utf-8")
test_result = {"test_steps": []}

def log_message(message):
    print(message)
    with open("test_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(message + "\n")  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    test_result["test_steps"].append(message)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô JSON

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebDriver
driver = webdriver.Chrome()

# 1Ô∏è‚É£ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Saucedemo
driver.get("https://www.saucedemo.com/")
time.sleep(2)
log_message("üîó ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Saucedemo")

# 2Ô∏è‚É£ Login
driver.find_element(By.ID, "user-name").send_keys(USERNAME)
driver.find_element(By.ID, "password").send_keys(PASSWORD)
driver.find_element(By.ID, "login-button").click()
time.sleep(3)
log_message("üîë Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# 3Ô∏è‚É£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ & ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
for keyword in KEYWORDS:
    try:
        product_element = driver.find_element(By.XPATH, f"//div[text()='{keyword}']")
        add_to_cart_button = product_element.find_element(By.XPATH, "./ancestor::div[@class='inventory_item']//button")
        add_to_cart_button.click()
        log_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {keyword} ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        time.sleep(1)
    except Exception as e:
        log_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {keyword} - Error: {str(e)}")

# 4Ô∏è‚É£ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
driver.find_element(By.CLASS_NAME, "shopping_cart_link").click()
time.sleep(2)
log_message("üõí ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

# 5Ô∏è‚É£ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏•‡∏ö Backpack ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤)
try:
    backpack_remove_button = driver.find_element(By.XPATH, "//div[text()='Sauce Labs Backpack']/ancestor::div[@class='cart_item']//button")
    backpack_remove_button.click()
    log_message("‚úÖ ‡∏•‡∏ö Backpack ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    time.sleep(1)
except Exception as e:
    log_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Backpack ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ - Error: {str(e)}")

# 6Ô∏è‚É£ Checkout
driver.find_element(By.ID, "checkout").click()
time.sleep(2)
log_message("üí≥ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Checkout")

# 7Ô∏è‚É£ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
driver.find_element(By.ID, "first-name").send_keys("Ronnapat")
driver.find_element(By.ID, "last-name").send_keys("Jitsom")
driver.find_element(By.ID, "postal-code").send_keys("10230")
driver.find_element(By.ID, "continue").click()
time.sleep(2)
log_message("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

# 8Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° + ‡∏†‡∏≤‡∏©‡∏µ 8%
subtotal = float(driver.find_element(By.CLASS_NAME, "summary_subtotal_label").text.split("$")[1])
tax = round(subtotal * 0.08, 2)
total_price = float(driver.find_element(By.CLASS_NAME, "summary_total_label").text.split("$")[1])

log_message(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${subtotal}")
log_message(f"üí∞ ‡∏†‡∏≤‡∏©‡∏µ 8%: ${tax}")
log_message(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ): ${total_price}")

expected_total = round(subtotal + tax, 2)
if expected_total == total_price:
    log_message("‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
else:
    log_message("‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

# 9Ô∏è‚É£ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
driver.find_element(By.ID, "finish").click()
time.sleep(2)
log_message("üõçÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")

# üîü ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
success_message = driver.find_element(By.CLASS_NAME, "complete-header").text
if "THANK YOU FOR YOUR ORDER" in success_message.upper():
    log_message("üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    test_result["result"] = "Success"
else:
    log_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
    test_result["result"] = "Failed"

# ‡∏õ‡∏¥‡∏î Browser
driver.quit()

# üîπ ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå Log
log_file.close()

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á JSON
with open("test_result.json", "w", encoding="utf-8") as json_file:
    json.dump(test_result, json_file, indent=4, ensure_ascii=False)

log_message("üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡πÅ‡∏•‡∏∞ Test Result ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
